

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Jan 07 03:13:04 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169                           
   170                           	psect	idataCOMMON
   171  00A6                     __pidataCOMMON:
   172                           
   173                           ;initializer for _step
   174  00A6  3403               	retlw	3
   175  00A7  3400               	retlw	0
   176  0001                     _TMR0	set	1
   177  005D                     _T0IE	set	93
   178  005F                     _GIE	set	95
   179  0030                     _RB0	set	48
   180  005A                     _T0IF	set	90
   181  0081                     _OPTION_REG	set	129
   182  0086                     _TRISB	set	134
   183                           
   184                           	psect	cinit
   185  0013                     start_initialization:	
   186                           ; #config settings
   187                           
   188  0013                     __initialization:
   189                           
   190                           ; Initialize objects allocated to COMMON
   191  0013  120A  118A  20A6  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   192  0018  00F8               	movwf	__pdataCOMMON& (0+127)
   193  0019  120A  118A  20A7  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   194  001E  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   195                           
   196                           ; Clear objects allocated to COMMON
   197  001F  01F0               	clrf	__pbssCOMMON& (0+127)
   198  0020  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   199  0021  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   200  0022  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   201  0023                     end_of_initialization:	
   202                           ;End of C runtime variable initialization code
   203                           
   204  0023                     __end_of__initialization:
   205  0023  0183               	clrf	3
   206  0024  120A  118A  2897   	ljmp	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMMON
   209  0070                     __pbssCOMMON:
   210  0070                     _gecikme:
   211  0070                     	ds	2
   212  0072                     _counter:
   213  0072                     	ds	2
   214                           
   215                           	psect	dataCOMMON
   216  0078                     __pdataCOMMON:
   217  0078                     _step:
   218  0078                     	ds	2
   219                           
   220                           	psect	cstackCOMMON
   221  0074                     __pcstackCOMMON:
   222  0074                     ?_KESME:
   223  0074                     ??_KESME:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0074                     ?_main:	
   227                           ; 1 bytes @ 0x0
   228                           
   229                           
   230                           ; 1 bytes @ 0x0
   231  0074                     	ds	4
   232  0078                     ??_main:
   233                           
   234                           	psect	maintext
   235  0097                     __pmaintext:	
   236                           ; 1 bytes @ 0x4
   237 ;;
   238 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   239 ;;
   240 ;; *************** function _main *****************
   241 ;; Defined at:
   242 ;;		line 47 in file "Servo-Motor.c"
   243 ;; Parameters:    Size  Location     Type
   244 ;;		None
   245 ;; Auto vars:     Size  Location     Type
   246 ;;		None
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2
   251 ;; Tracked objects:
   252 ;;		On entry : B00/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   256 ;;      Params:         0       0       0       0       0
   257 ;;      Locals:         0       0       0       0       0
   258 ;;      Temps:          0       0       0       0       0
   259 ;;      Totals:         0       0       0       0       0
   260 ;;Total ram usage:        0 bytes
   261 ;; Hardware stack levels required when called: 1
   262 ;; This function calls:
   263 ;;		Nothing
   264 ;; This function is called by:
   265 ;;		Startup code after reset
   266 ;; This function uses a non-reentrant model
   267 ;;
   268                           
   269                           
   270                           ;psect for function _main
   271  0097                     _main:
   272  0097                     l658:	
   273                           ;incstack = 0
   274                           ; Regs used in _main: [wreg+status,2]
   275                           
   276                           
   277                           ;Servo-Motor.c: 49:     GIE=1;
   278  0097  178B               	bsf	11,7	;volatile
   279                           
   280                           ;Servo-Motor.c: 50:     T0IE=1;
   281  0098  168B               	bsf	11,5	;volatile
   282  0099                     l660:
   283                           
   284                           ;Servo-Motor.c: 51:     TRISB=0;
   285  0099  1683               	bsf	3,5	;RP0=1, select bank1
   286  009A  1303               	bcf	3,6	;RP1=0, select bank1
   287  009B  0186               	clrf	6	;volatile
   288  009C                     l662:
   289                           
   290                           ;Servo-Motor.c: 52:     OPTION_REG=0x02;
   291  009C  3002               	movlw	2
   292  009D  0081               	movwf	1	;volatile
   293  009E                     l664:
   294                           
   295                           ;Servo-Motor.c: 53:     TMR0=231;
   296  009E  30E7               	movlw	231
   297  009F  1283               	bcf	3,5	;RP0=0, select bank0
   298  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   299  00A1  0081               	movwf	1	;volatile
   300  00A2                     l37:	
   301                           ;Servo-Motor.c: 54:     while(1){}
   302                           
   303  00A2                     l38:
   304  00A2  28A2               	goto	l37
   305  00A3  120A  118A  2810   	ljmp	start
   306  00A6                     __end_of_main:
   307                           
   308                           	psect	text1
   309  0027                     __ptext1:	
   310 ;; *************** function _KESME *****************
   311 ;; Defined at:
   312 ;;		line 16 in file "Servo-Motor.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;		None
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0, btemp+1
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   326 ;;      Params:         0       0       0       0       0
   327 ;;      Locals:         0       0       0       0       0
   328 ;;      Temps:          4       0       0       0       0
   329 ;;      Totals:         4       0       0       0       0
   330 ;;Total ram usage:        4 bytes
   331 ;; Hardware stack levels used: 1
   332 ;; This function calls:
   333 ;;		Nothing
   334 ;; This function is called by:
   335 ;;		Interrupt level 1
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339                           
   340                           ;psect for function _KESME
   341  0027                     _KESME:
   342  0027                     i1l632:
   343                           
   344                           ;Servo-Motor.c: 18: if(T0IF){
   345  0027  1D0B               	btfss	11,2	;volatile
   346  0028  282A               	goto	u1_21
   347  0029  282B               	goto	u1_20
   348  002A                     u1_21:
   349  002A  2889               	goto	i1l654
   350  002B                     u1_20:
   351  002B                     i1l634:
   352                           
   353                           ;Servo-Motor.c: 20:     gecikme++;
   354  002B  3001               	movlw	1
   355  002C  07F0               	addwf	_gecikme,f
   356  002D  1803               	skipnc
   357  002E  0AF1               	incf	_gecikme+1,f
   358  002F  3000               	movlw	0
   359  0030  07F1               	addwf	_gecikme+1,f
   360  0031                     i1l636:
   361                           
   362                           ;Servo-Motor.c: 22:     if(gecikme>5000){
   363  0031  0871               	movf	_gecikme+1,w
   364  0032  3A80               	xorlw	128
   365  0033  00FF               	movwf	btemp+1
   366  0034  3093               	movlw	147
   367  0035  027F               	subwf	btemp+1,w
   368  0036  1D03               	skipz
   369  0037  283A               	goto	u2_25
   370  0038  3089               	movlw	137
   371  0039  0270               	subwf	_gecikme,w
   372  003A                     u2_25:
   373  003A  1C03               	skipc
   374  003B  283D               	goto	u2_21
   375  003C  283E               	goto	u2_20
   376  003D                     u2_21:
   377  003D  2857               	goto	i1l26
   378  003E                     u2_20:
   379  003E                     i1l638:
   380                           
   381                           ;Servo-Motor.c: 24:         gecikme=0;
   382  003E  01F0               	clrf	_gecikme
   383  003F  01F1               	clrf	_gecikme+1
   384  0040                     i1l640:
   385                           
   386                           ;Servo-Motor.c: 26:         if(step>8){
   387  0040  0879               	movf	_step+1,w
   388  0041  3A80               	xorlw	128
   389  0042  00FF               	movwf	btemp+1
   390  0043  3080               	movlw	128
   391  0044  027F               	subwf	btemp+1,w
   392  0045  1D03               	skipz
   393  0046  2849               	goto	u3_25
   394  0047  3009               	movlw	9
   395  0048  0278               	subwf	_step,w
   396  0049                     u3_25:
   397  0049  1C03               	skipc
   398  004A  284C               	goto	u3_21
   399  004B  284D               	goto	u3_20
   400  004C                     u3_21:
   401  004C  2851               	goto	i1l27
   402  004D                     u3_20:
   403  004D                     i1l642:
   404                           
   405                           ;Servo-Motor.c: 27:             step=2;
   406  004D  3002               	movlw	2
   407  004E  00F8               	movwf	_step
   408  004F  3000               	movlw	0
   409  0050  00F9               	movwf	_step+1
   410  0051                     i1l27:	
   411                           ;Servo-Motor.c: 28:         }
   412                           
   413                           
   414                           ;Servo-Motor.c: 29:         step++;
   415  0051  3001               	movlw	1
   416  0052  07F8               	addwf	_step,f
   417  0053  1803               	skipnc
   418  0054  0AF9               	incf	_step+1,f
   419  0055  3000               	movlw	0
   420  0056  07F9               	addwf	_step+1,f
   421  0057                     i1l26:	
   422                           ;Servo-Motor.c: 30:     }
   423                           
   424                           
   425                           ;Servo-Motor.c: 32:     counter++;
   426  0057  3001               	movlw	1
   427  0058  07F2               	addwf	_counter,f
   428  0059  1803               	skipnc
   429  005A  0AF3               	incf	_counter+1,f
   430  005B  3000               	movlw	0
   431  005C  07F3               	addwf	_counter+1,f
   432                           
   433                           ;Servo-Motor.c: 34:     if (counter<=step)
   434  005D  0879               	movf	_step+1,w
   435  005E  3A80               	xorlw	128
   436  005F  00F4               	movwf	??_KESME
   437  0060  0873               	movf	_counter+1,w
   438  0061  3A80               	xorlw	128
   439  0062  0274               	subwf	??_KESME,w
   440  0063  1D03               	skipz
   441  0064  2867               	goto	u4_25
   442  0065  0872               	movf	_counter,w
   443  0066  0278               	subwf	_step,w
   444  0067                     u4_25:
   445  0067  1C03               	skipc
   446  0068  286A               	goto	u4_21
   447  0069  286B               	goto	u4_20
   448  006A                     u4_21:
   449  006A  286F               	goto	i1l646
   450  006B                     u4_20:
   451  006B                     i1l644:
   452                           
   453                           ;Servo-Motor.c: 35:         RB0=1;
   454  006B  1283               	bcf	3,5	;RP0=0, select bank0
   455  006C  1303               	bcf	3,6	;RP1=0, select bank0
   456  006D  1406               	bsf	6,0	;volatile
   457  006E  2880               	goto	i1l650
   458  006F                     i1l646:
   459  006F  0879               	movf	_step+1,w
   460  0070  3A80               	xorlw	128
   461  0071  00F4               	movwf	??_KESME
   462  0072  0873               	movf	_counter+1,w
   463  0073  3A80               	xorlw	128
   464  0074  0274               	subwf	??_KESME,w
   465  0075  1D03               	skipz
   466  0076  2879               	goto	u5_25
   467  0077  0872               	movf	_counter,w
   468  0078  0278               	subwf	_step,w
   469  0079                     u5_25:
   470  0079  1803               	skipnc
   471  007A  287C               	goto	u5_21
   472  007B  287D               	goto	u5_20
   473  007C                     u5_21:
   474  007C  2880               	goto	i1l650
   475  007D                     u5_20:
   476  007D                     i1l648:
   477                           
   478                           ;Servo-Motor.c: 37:         RB0=0;
   479  007D  1283               	bcf	3,5	;RP0=0, select bank0
   480  007E  1303               	bcf	3,6	;RP1=0, select bank0
   481  007F  1006               	bcf	6,0	;volatile
   482  0080                     i1l650:
   483                           
   484                           ;Servo-Motor.c: 39:    if (counter==100)
   485  0080  3064               	movlw	100
   486  0081  0672               	xorwf	_counter,w
   487  0082  0473               	iorwf	_counter+1,w
   488  0083  1D03               	btfss	3,2
   489  0084  2886               	goto	u6_21
   490  0085  2887               	goto	u6_20
   491  0086                     u6_21:
   492  0086  2889               	goto	i1l654
   493  0087                     u6_20:
   494  0087                     i1l652:
   495                           
   496                           ;Servo-Motor.c: 40:         counter=0;
   497  0087  01F2               	clrf	_counter
   498  0088  01F3               	clrf	_counter+1
   499  0089                     i1l654:
   500                           
   501                           ;Servo-Motor.c: 42:     TMR0=231;
   502  0089  30E7               	movlw	231
   503  008A  1283               	bcf	3,5	;RP0=0, select bank0
   504  008B  1303               	bcf	3,6	;RP1=0, select bank0
   505  008C  0081               	movwf	1	;volatile
   506  008D                     i1l656:
   507                           
   508                           ;Servo-Motor.c: 43:     T0IF=0;
   509  008D  110B               	bcf	11,2	;volatile
   510  008E                     i1l32:
   511  008E  0877               	movf	??_KESME+3,w
   512  008F  00FF               	movwf	btemp+1
   513  0090  0876               	movf	??_KESME+2,w
   514  0091  008A               	movwf	10
   515  0092  0E75               	swapf	??_KESME+1,w
   516  0093  0083               	movwf	3
   517  0094  0EFE               	swapf	btemp,f
   518  0095  0E7E               	swapf	btemp,w
   519  0096  0009               	retfie
   520  0097                     __end_of_KESME:
   521  007E                     btemp	set	126	;btemp
   522  007E                     wtemp0	set	126
   523                           
   524                           	psect	intentry
   525  0004                     __pintentry:	
   526                           ;incstack = 0
   527                           ; Regs used in _KESME: [wreg+status,2+status,0+btemp+1]
   528                           
   529  0004                     interrupt_function:
   530  007E                     saved_w	set	btemp
   531  0004  00FE               	movwf	btemp
   532  0005  0E03               	swapf	3,w
   533  0006  00F5               	movwf	??_KESME+1
   534  0007  080A               	movf	10,w
   535  0008  00F6               	movwf	??_KESME+2
   536  0009  1283               	bcf	3,5	;RP0=0, select bank0
   537  000A  1303               	bcf	3,6	;RP1=0, select bank0
   538  000B  087F               	movf	btemp+1,w
   539  000C  00F7               	movwf	??_KESME+3
   540  000D  120A  118A  2827   	ljmp	_KESME
   541                           
   542                           	psect	config
   543                           
   544                           ;Config register CONFIG @ 0x2007
   545                           ;	Oscillator Selection bits
   546                           ;	FOSC = XT, XT oscillator
   547                           ;	Watchdog Timer Enable bit
   548                           ;	WDTE = OFF, WDT disabled
   549                           ;	Power-up Timer Enable bit
   550                           ;	PWRTE = OFF, PWRT disabled
   551                           ;	Brown-out Reset Enable bit
   552                           ;	BOREN = OFF, BOR disabled
   553                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   554                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   555                           ;	Data EEPROM Memory Code Protection bit
   556                           ;	CPD = OFF, Data EEPROM code protection off
   557                           ;	Flash Program Memory Write Enable bits
   558                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   559                           ;	In-Circuit Debugger Mode bit
   560                           ;	DEBUG = 0x1, unprogrammed default
   561                           ;	Flash Program Memory Code Protection bit
   562                           ;	CP = OFF, Code protection off
   563  2007                     	org	8199
   564  2007  3F39               	dw	16185

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _KESME in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _KESME in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _KESME in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _KESME in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _KESME in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _KESME                                                4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _KESME (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       A      12        0.0%
ABS                  0      0       A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Jan 07 03:13:04 2022

                     l37 00A2                       l38 00A2                      l660 0099  
                    l662 009C                      l664 009E                      l658 0097  
                    _GIE 005F                      _RB0 0030                     _T0IE 005D  
                   _T0IF 005A                     i1l32 008E                     i1l26 0057  
                   i1l27 0051                     _TMR0 0001                     u1_20 002B  
                   u1_21 002A                     u2_20 003E                     u2_21 003D  
                   u2_25 003A                     u3_20 004D                     u3_21 004C  
                   u3_25 0049                     u4_20 006B                     u4_21 006A  
                   u4_25 0067                     u5_20 007D                     u5_21 007C  
                   u5_25 0079                     u6_20 0087                     u6_21 0086  
                   _main 0097                     _step 0078                     btemp 007E  
                   start 0010                    ?_main 0074                    _KESME 0027  
                  i1l640 0040                    i1l632 0027                    i1l650 0080  
                  i1l642 004D                    i1l634 002B                    i1l652 0087  
                  i1l644 006B                    i1l636 0031                    i1l646 006F  
                  i1l638 003E                    i1l654 0089                    i1l656 008D  
                  i1l648 007D                    _TRISB 0086                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0013  
           __end_of_main 00A6                   ??_main 0078                   ?_KESME 0074  
           __pdataCOMMON 0078                   saved_w 007E  __end_of__initialization 0023  
          __end_of_KESME 0097           __pcstackCOMMON 0074                  ??_KESME 0074  
             __pmaintext 0097               __pintentry 0004                  _gecikme 0070  
                __ptext1 0027                  _counter 0072     end_of_initialization 0023  
          __pidataCOMMON 00A6      start_initialization 0013              __pbssCOMMON 0070  
              ___latbits 0002           __size_of_KESME 0070        interrupt_function 0004  
          __size_of_main 000F                 intlevel1 0000               _OPTION_REG 0081  
